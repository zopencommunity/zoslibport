# bump: zoslib-version /ZOSLIB_VERSION="(.*)"/ https://github.com/ibmruntimes/zoslib.git|semver:*
ZOSLIB_VERSION="4.0.1"

export ZOPEN_BUILD_LINE="DEV"
export ZOPEN_CATEGORIES="library"
export ZOPEN_DEV_URL="https://github.com/ibmruntimes/zoslib.git"
export ZOPEN_DEV_DEPS="make cmake git coreutils"
export ZOPEN_DEV_BRANCH="zopen2" # use the zopen experimental branch until it is merged in
export ZOPEN_DONT_ADD_ZOSLIB_DEP=1 # zoslib cannot currently build with itself

export ZOPEN_CONFIGURE="cmake"
export ZOPEN_CONFIGURE_OPTS="-B ../build  --install-prefix \$ZOPEN_INSTALL_DIR/ -DBUILD_TESTING=ON -DENABLE_STATIC_INIT=ON -DZOSLIB_GENERIC=ON -DZOSLIB_QUICK_STARTUP=ON -DCMAKE_INSTALL_PREFIX=\$ZOPEN_INSTALL_DIR/ -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ."

export ZOPEN_MAKE="cmake"
export ZOPEN_MAKE_OPTS=" --build ../build --parallel \$ZOPEN_NUM_JOBS --target all"
export ZOPEN_MAKE_MINIMAL="yes"

export LIBPATH="\$PWD/lib/:\$LIBPATH"
export ZOPEN_CHECK="../build/test/cctest_a"

export ZOPEN_INSTALL="cmake"
export ZOPEN_INSTALL_OPTS="--install ../build"
export ZOPEN_COMP=CLANG

export ZOPEN_CLEAN=zoslib_clean

zoslib_clean()
{
  rm -rf ../build
}

zopen_check_results()
{
  dir="$1"
  pfx="$2"
  chk="$1/$2_check.log"
  totalTests="$(grep -c -E "\[ RUN" ${chk})"
  success="$(grep -c -E "\[[ ]+ OK ]" ${chk})"
  failures=$((totalTests-success))
  

  echo "actualFailures:$failures"
  echo "totalTests:$totalTests"
  echo "expectedFailures:0"
}

zopen_append_to_env()
{
cat <<ZZ
if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
  export ZOPEN_EXTRA_CPPFLAGS="\${ZOPEN_EXTRA_CPPFLAGS} -DZOSLIB_OVERRIDE_CLIB=1 -DZOSLIB_OVERRIDE_CLIB_GETENV=1 -DZOSLIB_USE_CLIB_LOCALE=1"
  export ZOPEN_EXTRA_CFLAGS="\${ZOPEN_EXTRA_CFLAGS} -isystem \$PWD/include"
  export ZOPEN_EXTRA_CXXFLAGS="\${ZOPEN_EXTRA_CXXFLAGS} -isystem \$PWD/include"
  export ZOPEN_EXTRA_LDFLAGS="\${ZOPEN_EXTRA_LDFLAGS} -L\$PWD/lib"
  export ZOPEN_EXTRA_LIBS="\${ZOPEN_EXTRA_LIBS} -lzoslib \$PWD/lib/celquopt.s.o -lzoslib-supp"
  if [[ "\$ZOPEN_COMP" == "XLCLANG" ]]; then
    export ZOPEN_EXTRA_CFLAGS="\${ZOPEN_EXTRA_CFLAGS} -qinclude=\$PWD/include/zos-v2r5-symbolfixes.h"
    export ZOPEN_EXTRA_CXXFLAGS="\${ZOPEN_EXTRA_CXXFLAGS} -qinclude=\$PWD/include/zos-v2r5-symbolfixes.h"
  else
    export ZOPEN_EXTRA_CFLAGS="\${ZOPEN_EXTRA_CFLAGS} -include \$PWD/include/zos-v2r5-symbolfixes.h"
    export ZOPEN_EXTRA_CXXFLAGS="\${ZOPEN_EXTRA_CXXFLAGS} -include \$PWD/include/zos-v2r5-symbolfixes.h"
  fi
fi
ZZ
}

zopen_post_install()
{
  install_dir=$1
  # This is a nasty hack b/c zoslib uses C++ and many apps are C apps.
  # Those apps need to link with the c++ rt b/c zoslib has c++ code.
  if [[ "$ZOPEN_COMP" == "XLCLANG" ]]; then
    libs=CXXRT64
    sceelib="CEE.SCEELIB"
  else
    libs="CRTDQCXA CRTDQCXE CRTDQCXP CRTDQCXS CRTDQUNW CRTDQXLA"
    if [ ! -d "$TMPDIR" ]; then
      TMPDIR=/tmp
    fi
    tfn=$TMPDIR/empty.$$.o
    touch $tfn
    sceelib=$($CXX -### $TMPDIR/empty.$$.o 2>&1 |awk '{for (x=1; x<NF; x++) if ($x ~ /CRTDQUNW/) {sub(/^[^A-Z]*/,"",$x); sub(/\(.*/,"", $x); print $x; }}')
    rm $tfn
  fi
  (cd $install_dir/lib;
  printf "%-80.80s" '*! IEWBIND INCLUDE' >side_deck_magic.x
  rm -f libzoslib-supp.a
  for l in ${libs}
  do
    cp -B "//'$sceelib($l)'" $l
    cat side_deck_magic.x $l >$l.x
    ar r $install_dir/lib/libzoslib-supp.a $l.x
    rm $l $l.x
  done
  rm side_deck_magic.x
  )
}

zopen_get_version()
{
  set -e
  if [ ! -d "$TMPDIR" ]; then
    TMPDIR=/tmp
  fi
  TMP_EXE=$TMPDIR/zoslibver$$
  TMP_CPP=$TMPDIR/zoslibver$$.cc

  echo '
    #include <zos.h>
    #include <stdio.h>

    __init_zoslib mylib;

    int main(int argc, char** argv) {
      printf("%s", __zoslib_version);
    }
  ' >$TMP_CPP

  (export ZOPEN_OLD_PATH=$PATH; PATH="$ZOPEN_OLD_PATH" $CXX $CXXFLAGS $CPPFLAGS -isystem include -isystem include/c++/v1/ -L ../build/lib -o$TMP_EXE $TMP_CPP -lzoslib)
  $TMP_EXE | tr -d 'v'  && rm $TMP_CPP && rm $TMP_EXE
}
